{
  "filename": "JAVA_base.txt",
  "mime_type": "text/plain",
  "status": "success",
  "text": "Week 1:\n\nSession 1: Java Architecture and Basics of OOP\n* Introduction to Java architecture: JDK, JRE, and JVM.\n\n* Basics of Object-Oriented Programming (OOP): Objects, Classes, Inheritance.\n\n* Understanding Polymorphism, Abstraction, and Encapsulation in OOP.\n\n* Practical examples illustrating Object-Oriented Programming concepts.\n\nSession 2: Abstract Classes vs. Interfaces, Exception Handling, and Singleton Design Pattern\n* Comparison between Abstract Classes and Interfaces with examples and use cases.\n\n* Exception Hierarchy in Java: understanding types and relationships.\n\n* Overview of Finally Block for cleanup operations.\n\n* Throwing Exceptions explicitly using the throw keyword.\n* Exception Propagation: how exceptions propagate up the call stack.\n* Introduction to Singleton Design Pattern.\n\nWeek 2 : \n\nSession 3: Lambda Expressions, Functional Interfaces, and Collections\n* Exploring Lambda Expressions and Functional Interfaces in Java 8.\n* Practical usage of built-in functional interfaces: Predicate, Consumer, Function.\n* Overview of Java Collections framework: Lists, Sets, Maps.\n* Introduction to Queues in Java Collections.\n* Using Lambdas for concise and functional programming.\n\nSession 4: Generics, Streams and HashMap\u00a0\n* Understanding Generics in Java: generic classes and methods.\n* Working with Streams API for functional-style operations on collections.\n* Delving into the workings of HashMap and its usage.\n* Exploring different hashing algorithms used by HashMap.\n\n* Leveraging Streams for efficient data processing and manipulation.\n* Differences between Sequential and Parallel Streams\n\nWeek 3 :\n\nSession 5: Multithreading Basics and Advanced Concepts\n* Introduction to Multithreading: Creating and managing threads in Java\n* Exploring thread pool and join operations.\n* Synchronization Mechanisms\n* Exploring thread pools for efficient thread management.\n* Executor Service: Overview and Benefits\nSession 6:\u00a0 Maven Project Management\u00a0\n* Understanding the Need for Maven\n* Working with POM.xml and Maven Repositories\n* Maven Lifecycle Management\n* Introduction to Maven plugins\n* Creating a new Maven project using archetypes\n\nWeek 4 :\n\nSession 7: Introduction to Spring Framework\n* Overview of the Spring Framework and its Need.\n* Dependency Injection (DI) and Inversion of Control (IoC) principles.\n* Types of Dependency Injection (constructor and setter)\n* Configuring Beans using XML and annotations.\n* Differentiates between ApplicationContext and BeanFactory in Spring.\n* Bean Lifecycle and Scopes.\nSession 8: Spring Boot Basics\n* Advantages of Spring Boot over Traditional Spring Framework and its Purpose\n* Setting up a Spring Boot project using Spring Initializr.\n* Understanding Spring Boot auto-configuration.\n* Creating and running a Spring Boot application.\n* Spring Boot Annotations.\n* Packaging and deploying Spring Boot applications\n\nWeek 5 :\n\nSession 9: Spring MVC Basics\u00a0 & REST API Implementation\n* Overview of Spring MVC architecture and its role in web development.\n* Understanding the Model, View, and Controller components.\n* Setting up a Spring MVC project\n* Handling requests and responses using Spring MVC.\n* Principles and benefits of RESTful architecture.\n* Overview of HTTP methods: GET, POST, DELETE, PUT, PATCH.\n* Designing and implementing RESTful APIs.\nSession 10:\u00a0 Spring AOP, Lombok API , and Spring Logger\n* Introduction to Aspect-Oriented Programming (AOP).\n* Implementing cross-cutting concerns using Spring AOP.\n* Using Lombok for Simplified Java Code\n* Integrating Lombok in a Spring Boot Project\n* Overview of logging in Spring Boot applications.\n\nWeek 6: \n\nSession 11: Java Database Connectivity (JDBC)\n* Overview of JDBC and its role in database connectivity.\n* Learn DDL and DML commands.\n* Setting up Database Configuration\n* Introduction to Spring JDBC Template for database operations.\n* Implementing some operations using the JDBC Template.\n* Mapping database rows to Java objects using RowMapper.\n* Understand how connection pooling works.\u00a0\nSession 12: Hibernate and Spring Data JPA\u00a0\n* Understanding the Need for Abstraction\n* Introduction to JPA (Java Persistence API)\n* Introduction to Hibernate\n* Entity Classes and Annotations\n* JPA Repository and Performing CRUD Operations\n* Implementing transactional behavior in Spring Boot applications.\n* Learn about relationships in JPA (One-to-One, One-to-Many, Many-to-One, Many-to-Many)\u00a0\n\nWeek 7 :\n\nSession 13: Minor Project - Digital Library\n* Work on a Digital Library [Minor Project]\n* Setting Up the Project Environment\n* Design the technical architecture of an application\n* Design a project flowchart to visualize the overall architecture and workflow.\nSession 14: Digital Library [Minor Project] (Continued)\u00a0\n* Continue working on the Digital Library [Minor Project]\u00a0\n* Add Features to the Project\n* Understand project HLSD\u00a0\n* Data Modeling concepts\u00a0\n\nWeek 8: \n\nSession 15: Unit Testing with JUnit & Mockito\u00a0\n* Describe JUnit5 testing\n* Implement repository layer testing\n* Explore the Mockito framework\n* Implement service layer testing\n* Explore Mockmvc\u00a0\n* Implement controller layer testing\nSession 16: Redis & Caching\n* Learn the differences between Cache and Cookie.\n* Understand Server Cache vs. Browser Cache.\n* Get introduced to Redis.\n* Work with Local Redis Server.\n* Online Centralized Redis Server for efficient caching.\n\nWeek 9 :\n\nSession 17: Spring Security & Authentication\n* Learn about Spring Security and its terminologies.\n* Setting Up Spring Security\n* Authentication and Authorization\n* Understand Authorization with In-Memory.\n* Database user Authentication.\nSession 18: Digital Library [Minor Project] (Continued)\n* Integration of J-unit and Redis caching in a Minor project.\n* Add Spring Security in a Minor project.\n* Improvement and feature addition for Digital Library [Minor Project].\n* Gain insights into project overview, project HLSD, and project Data Modeling.\n\nWeek 10:\n\nSession 19: OAuth 2 & Github Integration\n* Introduction to OAuth2.\n* OAuth 2 Providers\n* Learn the workflow of OAuth 2.0.\n* Explore Scopes and Consent.\n* Implement Github OAuth2 integration with Spring Boot.\n* Implementation Steps.\nSession 20: Microservices\n* Difference between Monolith Architecture and Microservices Architecture.\n* Develop microservices using Spring Boot.\n* Intercommunication between Microservices using Feign client.\n* Load Balancing Algorithms and Introduction to Eureka Server\n* Learn about the Consumers and Producers Model.\n\nWeek 11:\n\nSession 21: Kafka Integration with Microservices and Spring Cloud\n* Learn about Message Queues and their types.\n* Integrate Kafka with Spring Boot.\n* Introduced to Kafka Message Queue for efficient messaging systems.\n* Introduction to Spring Cloud and its configuration & Hystrix circuit breaker.\nSession 22: E-Wallet App like Paytm Pay [Major Project Part 1]\n* Start working on an E-Wallet App like Paytm Pay.\n* Project Overview.\n* Project HLSD.\n* Project Data Modeling.\n* Building Microservice Architecture.\n\nWeek 12:\n\nSession 23: E-Wallet App like Paytm Pay [Major Project Part 2]\n* Major Project Continued.\n* Design the technical architecture of an application\n* Set up Spring Cloud Gateway to route requests to the appropriate microservices.\n* Project Queries.\nSession 24: Deployment Java Application\n* Introduction to the deployment process and its workflow.\n* CI/CD: Setting up CI/CD pipelines using Jenkins or GitHub Actions.\n* Building and packaging Java applications.\n* Deploying our projects to the cloud.\n* Monitoring and logging using tools like Prometheus, Grafana, and the ELK stack (Elasticsearch, Logstash, Kibana)."
}
