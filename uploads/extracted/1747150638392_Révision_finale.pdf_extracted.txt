{
  "filename": "1747150638226_Revision_finale.pdf",
  "mime_type": "application/pdf",
  "saved_text_path": "pdf_files\\1747150638226_Revision_finale_20250513_163718.txt",
  "status": "success",
  "text": "TP \u2013 P.O.O  \nLangage Java \u2013 4IIR Bouchra HONNIT  \n \n1 \n \nR\u00e9vision finale  \n \n \nOn souhaite r\u00e9aliser une application de gestion des employ\u00e9s et des t\u00e2ches.  \nOn consid\u00e8re que  : \n- Une t\u00e2che est caract\u00e9ris\u00e9e par  : un num\u00e9ro, un intitul\u00e9, une description, une priorit\u00e9 \n(entier), date de d\u00e9but, date de fin, dur\u00e9e, \u00e9tat (sa valeur peut \u00eatre  : en cours, suspendu, \ntermin\u00e9e, annul\u00e9, programm\u00e9e).  \n- Un employ\u00e9 est caract\u00e9ris\u00e9 par  : un identifiant, un nom, un pr\u00e9nom, un CIN, une date \nde naissance, une sp\u00e9cialit \u00e9, un salaire, une liste des t\u00e2ches.  \n \n1. D\u00e9clarer une enum  Etat dont les vale urs sont en cours, suspendu, termin\u00e9e, annul\u00e9, \nprogramm\u00e9e  (en majuscule)  \n2. D\u00e9clarer une classe T\u00e2che  qui poss\u00e8de  \na. Des attributs priv\u00e9s (voir la description)  \nb. Un constructeur avec param\u00e8tre  \nc. La m\u00e9thode toString  \nd. La m\u00e9thode equals  : deux t\u00e2ches sont \u00e9gales si elle s poss\u00e8dent le m\u00eame num\u00e9ro et \nle m\u00eame intitul\u00e9.  \ne. Guetteurs et setters . Le setter  de la priorit\u00e9 de t\u00e2che ne peut accepter  qu\u2019une valeur \nentre 1 et 5. \n3. D\u00e9clarer une classe abstrait employ\u00e9 qui impl\u00e9mente comparable et qui poss\u00e8de  : \na. Des attributs priv\u00e9s.  \nb. Un constructeur avec param\u00e8tre  \nc. La m\u00e9thode toString  \nd. public boolean ajouterTache(Tache t)  la t\u00e2che t ne peut pas \u00eatre ajout\u00e9 si il existe \nun autre t\u00e2che dans la liste qui porte le m\u00eame identifiant. La m\u00e9thode retourne true \nsi l\u2019ajout est effectu\u00e9, false sinon.  \ne. public boolean supprimerTache(int numero ) permet de supprimer la t\u00e2che qui \nposs\u00e8de le num\u00e9ro pass\u00e9 en param\u00e8tre et retourne true. S\u2019il n\u2019existe aucune t\u00e2che \nayant le num\u00e9ro pass\u00e9 en param\u00e8tre, la m\u00e9thode retournera false.  \nf. M\u00e9thodes abstraites : \ni. public abstract double calculerPrime(); :  Calcul de la prime selon la \nclasse d\u00e9riv\u00e9e.  \nii. public abstract void afficherDetails();  : Affiche des informations \nsp\u00e9cifique s \u00e0 la classe d\u00e9riv\u00e9e.  \niii. public abstract double calculerCharge();  : Retourne la charge de travail \nou la performance.  \ng. Des m\u00e9thodes qui utilise nt les streams  : \ni. public void afficherParSpecialite()  : permet  d\u2019afficher les employ\u00e9s par \nsp\u00e9cialit\u00e9.  \nii. public int nombreTache()  : retourne le nombre des employ\u00e9s qui ont un \nnombre de t\u00e2che avec l\u2019\u00e9tat termin\u00e9 sup\u00e9rieur \u00e0 10  \niii. public int nombreEmploye()  : retourne le nombre des employ\u00e9s qui ont la \nsp\u00e9cialit\u00e9 \u00ab  informat ique \u00bb \niv. public Map<Etat, List<Tache>> getTache(Liste<Tache> l)  : permet de \nretourner u n map des t\u00e2ches group\u00e9e par \u00e9tat. \n  \nTP \u2013 P.O.O  \nLangage Java \u2013 4IIR Bouchra HONNIT  \n \n2 \n \n \n4. Cr\u00e9er les  classes d\u00e9riv\u00e9 es suivan tes : \n \na. Classe Technicien  : le Technicien repr\u00e9sente un employ\u00e9 sp\u00e9cialis\u00e9 dans des t\u00e2ches \ntechniques. Ses responsabilit\u00e9s peuvent \u00eatre li\u00e9es \u00e0 la maintenance, au support ou \u00e0 \nl\u2019ex\u00e9cution de t\u00e2ches techniques sp\u00e9cifiques.  \n- Attributs sp\u00e9cifiques :  \n\uf0a7 int niveauTechnique  : Niveau technique (par exemple : 1 pour d\u00e9butant, 5 pour \nexpert).  \n\uf0a7 int experience  : Ann\u00e9es d\u2019exp\u00e9rience dans le domaine technique.  \n\uf0a7 List<String> certifications :  Liste des certifications techniques obtenues (ex.\u202f:  \nCisco, AWS).  \n- M\u00e9thodes sp\u00e9cifiques :  \n\uf0a7 public void ajouterCertification(String certification)  : Ajoute une nouvelle \ncertification \u00e0 la liste.  \n\uf0a7 public void afficherCertifications() :  Affiche les certifications avec leur niveau \nd\u2019expertise.  \n\uf0a7 public double calcul erPrime() :  La prime pourrait d\u00e9pendre du niveau technique \net du nombre d\u2019ann\u00e9es d\u2019exp\u00e9rience. Par exemple :  (niveauTechnique * 200) + \n(experience * 100);  \n\uf0a7 public int getNombreTachesTechniques()  : Retourne le nombre de t\u00e2ches o\u00f9 la \npriorit\u00e9 est \u00e9lev\u00e9e (sup\u00e9rieure \u00e0 3).  \n \nb. Classe Ing\u00e9nieur  : L\u2019Ing\u00e9nieur est un employ\u00e9 qui g\u00e8re ou ex\u00e9cute des projets. Ses \nt\u00e2ches sont souvent li\u00e9es \u00e0 la conception, la planification ou la r\u00e9alisation de projets.  \n- Attributs sp\u00e9cifiques :  \n\uf0a7 List<String> projet sRealises  : Liste des projets r\u00e9alis\u00e9s par l\u2019ing\u00e9nieur.  \n\uf0a7 String specialisation :  Sp\u00e9cialisation technique ou fonctionnelle (ex.\u202f: IA, \nr\u00e9seaux, g\u00e9nie logiciel).  \n\uf0a7 int niveauResponsabilite  : Niveau de responsabilit\u00e9 dans l\u2019organisation (1 : \nd\u00e9butant, 5 : senior /chef de projet).  \n- M\u00e9thodes sp\u00e9cifiques :  \n\uf0a7 public void ajouterProjet(String projet) : Ajoute  un projet r\u00e9alis\u00e9 \u00e0 la liste.  \n\uf0a7 public double calculerPerformance()  : Calcule une note de performance bas\u00e9e \nsur le nombre de projets termin\u00e9s et le niveau de responsab ilit\u00e9.  \nExemple : projetsRealises.size() * 100 + (niveauResponsabilite * 50);  \n\uf0a7 public void afficherDetailsProjet() :  Affiche les projets r\u00e9alis\u00e9s et leur \nsp\u00e9cialisation associ\u00e9e.  \n\uf0a7 public double calculerPrime()  : La prime pourrait d\u00e9pendre du nombre de projets \nr\u00e9alis\u00e9s et du niveau de responsabilit\u00e9.  \nExemple :  (projetsRealises.size() * 300) + (niveauResponsabilite * 500);  \n \nc. Classe Administrateur  : L\u2019Administra teur est responsable de la gestion interne des \n\u00e9quipes ou de l\u2019organisation (RH, finance, logistique, etc.).  \n- Attributs sp\u00e9cifiques :  \n\uf0a7 int nombreEquipes  : Nombre d\u2019\u00e9quipes g\u00e9r\u00e9es.  \n\uf0a7 int dureeService :  Nombre d\u2019ann\u00e9es de service dans l\u2019entreprise.  \n\uf0a7 double budge tAnnuel :  Budget annuel g\u00e9r\u00e9 par l\u2019administrateur.  \nTP \u2013 P.O.O  \nLangage Java \u2013 4IIR Bouchra HONNIT  \n \n3 \n \n- M\u00e9thodes sp\u00e9cifiques :  \n\uf0a7 public double calculerBudgetParEquipe() :  Retourne le budget moyen par \n\u00e9quipe.  budgetAnnuel / nombreEquipes;  \n\uf0a7 public double calculerPrime()  : La prime d\u00e9pe nd du nombre d\u2019\u00e9quipes et de la \ndur\u00e9e de service. Exemple :  (nombreEquipes * 1000) + (dureeService * 200);  \n\uf0a7 public void afficherRapportGestion() :  Affiche un rapport sur les \u00e9quipes \ng\u00e9r\u00e9es, leur budget et les performances.  \n\uf0a7 public  void augmenterBudget(double pourcentage) :  Augmente le budget \nannuel de l\u2019administrateur d\u2019un certain pourcentage.  \n \nd. Classe Commercial  : Le Commercial est responsable de la gestion des ventes, du chiffre \nd\u2019affaires, et des relations avec les clients.  \n \n- Attributs sp\u00e9cifiques :  \n\uf0a7 double chiffreAffaires : Le  chiffre d\u2019affaires g\u00e9n\u00e9r\u00e9 par le commercial.  \n\uf0a7 int nombreClients :  Nombre de clients g\u00e9r\u00e9s.  \n\uf0a7 double tauxCommission :  Taux de commission (%).  \n- M\u00e9thodes sp\u00e9cifiques :  \n\uf0a7 public double calculerCommission() :  Calcul e la commission du commercial \nbas\u00e9e sur le chiffre d\u2019affaires. Exemple :  chiffreAffaires * (tauxCommission / \n100);  \n\uf0a7 public void ajouterClient() :  Incr\u00e9mente le nombre de clients g\u00e9r\u00e9s.  \n\uf0a7 public double calculerPrime() :  La prime pou rrait \u00eatre bas\u00e9e sur le chiffre \nd\u2019affaires et le nombre de clients. Exemple :  (chiffreAffaires * 0.05) + \n(nombreClients * 100);  \n\uf0a7 public void afficherStatistiquesVentes() :  Affiche les statistiques de ventes (CA, \ncommission, nombr e de clients).  \n \n5. Classe GestionEmployes  Cette classe permet  de mani puler une liste d\u2019employ\u00e9s . Elle \nposs\u00e8de une list e des employ\u00e9 s et les m\u00e9thodes suivantes  bas\u00e9es sur l es streams  : \na. public List<Employ e> trierParSalaire() :  Retourne la liste des employ\u00e9s tri\u00e9e \npar salaire d\u00e9croissant.  \nb. public Map<String, List<Employe>> regrouperParSpecialite() :  Regroupe les \nemploy\u00e9s par sp\u00e9cialit\u00e9.  \nc. public long nombreEmployesParSpecialite(String specialite)  : Retourne le \nnombre d\u2019employ\u00e9s d\u2019une sp\u00e9cialit\u00e9 donn\u00e9e.  \nd. public Optional<Employe> meilleurEmploye() : Retourne  l\u2019employ\u00e9 ayant la \nprime la plus \u00e9lev\u00e9e.  \n \n6. Classe Main : cr\u00e9er un e clas se mai n pour tester votre code.  \n7. R\u00e9crire la classe GestionEmploy\u00e9 en consid\u00e9rant un set des employ\u00e9s au  lieu d \u2019une \nliste.   \n8. Refaire la m \u00eame chose mais cette fois ci on consid\u00e8re un Map dont la valeur c \u2019est \nl\u2019identifiant est un entier (identifiant) et la  valeur est de type Employ\u00e9."
}
